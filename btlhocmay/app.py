import streamlit as st
import pandas as pd
import re, string
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# ============================================
# 1. H√†m ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n
# ============================================
def clean_text(text):
    text = str(text).lower()
    text = re.sub(r"\d+", "", text)
    text = text.translate(str.maketrans("", "", string.punctuation))
    text = re.sub(r"\s+", " ", text).strip()
    return text

# ============================================
# 2. Streamlit GUI
# ============================================
st.title("üì© Spam SMS Detection - Naive Bayes (TF-IDF + ngram)")

menu = ["Hu·∫•n luy·ªán m√¥ h√¨nh", "D·ª± ƒëo√°n tin nh·∫Øn", "T·∫£i file k·∫øt qu·∫£"]
choice = st.sidebar.selectbox("Ch·ªçn ch·ª©c nƒÉng", menu)

# ============================================
# 3. Hu·∫•n luy·ªán m√¥ h√¨nh
# ============================================
if choice == "Hu·∫•n luy·ªán m√¥ h√¨nh":
    st.subheader("üöÄ Hu·∫•n luy·ªán m√¥ h√¨nh Naive Bayes")

    train_file = st.file_uploader("Upload file train.csv", type=["csv"])
    test_file = st.file_uploader("Upload file test.csv", type=["csv"])

    if train_file is not None and test_file is not None:
        train_df = pd.read_csv(train_file)
        test_df = pd.read_csv(test_file)

        # L√†m s·∫°ch d·ªØ li·ªáu
        train_df["clean_text"] = train_df["sms"].apply(clean_text)
        test_df["clean_text"] = test_df["sms"].apply(clean_text)

        # TF-IDF + ngram
        tfidf_vectorizer = TfidfVectorizer(ngram_range=(1,2), max_features=5000)
        X_tfidf = tfidf_vectorizer.fit_transform(train_df["clean_text"])
        y = train_df["label"]

        X_train, X_val, y_train, y_val = train_test_split(
            X_tfidf, y, test_size=0.2, random_state=42, stratify=y
        )

        # Train model
        nb_model = MultinomialNB(alpha=0.5)
        nb_model.fit(X_train, y_train)

        # ƒê√°nh gi√°
        y_pred_val = nb_model.predict(X_val)
        acc = accuracy_score(y_val, y_pred_val)
        st.success(f"üéØ Accuracy tr√™n t·∫≠p validation: {acc:.4f}")

        st.text("B√°o c√°o ph√¢n lo·∫°i:")
        st.text(classification_report(y_val, y_pred_val))

        # L∆∞u model + vectorizer
        joblib.dump(nb_model, "naive_bayes_model.pkl")
        joblib.dump(tfidf_vectorizer, "tfidf_vectorizer.pkl")
        st.info("‚úÖ ƒê√£ l∆∞u m√¥ h√¨nh th√†nh c√¥ng!")

# ============================================
# 4. D·ª± ƒëo√°n tin nh·∫Øn m·ªõi
# ============================================
elif choice == "D·ª± ƒëo√°n tin nh·∫Øn":
    st.subheader("üîé Ki·ªÉm tra m·ªôt tin nh·∫Øn m·ªõi")

    sms_input = st.text_area("Nh·∫≠p n·ªôi dung tin nh·∫Øn t·∫°i ƒë√¢y:")

    if st.button("D·ª± ƒëo√°n"):
        try:
            model = joblib.load("naive_bayes_model.pkl")
            vectorizer = joblib.load("tfidf_vectorizer.pkl")

            clean_sms = clean_text(sms_input)
            X_input = vectorizer.transform([clean_sms])
            pred = model.predict(X_input)[0]
            proba = model.predict_proba(X_input)[0]

            ham_prob = proba[0] * 100
            spam_prob = proba[1] * 100

            if pred == 1:
                st.error(f"üö® ƒê√¢y l√† **SPAM**!\n\n"
                         f"üìä X√°c su·∫•t: {spam_prob:.2f}% Spam | {ham_prob:.2f}% Ham")
            else:
                st.success(f"‚úÖ ƒê√¢y l√† **HAM (tin nh·∫Øn b√¨nh th∆∞·ªùng)**.\n\n"
                           f"üìä X√°c su·∫•t: {ham_prob:.2f}% Ham | {spam_prob:.2f}% Spam")

        except:
            st.warning("‚ö†Ô∏è B·∫°n c·∫ßn hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc!")

# ============================================
# 5. Xu·∫•t file submission
# ============================================
elif choice == "T·∫£i file k·∫øt qu·∫£":
    st.subheader("üìÇ Xu·∫•t file submission.csv")

    test_file = st.file_uploader("Upload file test.csv ƒë·ªÉ d·ª± ƒëo√°n", type=["csv"])

    if test_file is not None:
        test_df = pd.read_csv(test_file)

        try:
            model = joblib.load("naive_bayes_model.pkl")
            vectorizer = joblib.load("tfidf_vectorizer.pkl")

            test_df["clean_text"] = test_df["sms"].apply(clean_text)
            X_test_tfidf = vectorizer.transform(test_df["clean_text"])
            test_pred = model.predict(X_test_tfidf)

            submission = pd.DataFrame({
                "id": test_df["id"],
                "label": test_pred
            })

            submission.to_csv("submission.csv", index=False, encoding="utf-8-sig")
            st.success("‚úÖ ƒê√£ t·∫°o file submission.csv")

            st.download_button(
                label="üì• T·∫£i v·ªÅ submission.csv",
                data=submission.to_csv(index=False).encode("utf-8-sig"),
                file_name="submission.csv",
                mime="text/csv"
            )

        except:
            st.warning("‚ö†Ô∏è B·∫°n c·∫ßn hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc!")
